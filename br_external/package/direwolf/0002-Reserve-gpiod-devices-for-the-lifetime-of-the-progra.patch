From 112781df1db630c460b64845f2ce8936ed609fed Mon Sep 17 00:00:00 2001
From: Adam Goldsmith <adam@adamgoldsmith.name>
Date: Tue, 26 Apr 2022 16:44:24 -0400
Subject: [PATCH 2/6] Reserve gpiod devices for the lifetime of the program

---
 src/audio.h  |   6 ++-
 src/config.c |   4 +-
 src/ptt.c    | 108 ++++++++++++++++++++++++++++++++++-----------------
 3 files changed, 79 insertions(+), 39 deletions(-)

diff --git a/src/audio.h b/src/audio.h
index e1abacd..74b8831 100644
--- a/src/audio.h
+++ b/src/audio.h
@@ -250,7 +250,10 @@ struct audio_s {
 
 					/* This same field is also used for CM108 GPIO PTT which will */
 					/* have a name like /dev/hidraw1. */
-			
+
+					/* This field is also used for GPIOD for which it can be a
+                    /* path, name, number, or label */
+
 	        ptt_line_t ptt_line;	/* Control line when using serial port. PTT_LINE_RTS, PTT_LINE_DTR. */
 	        ptt_line_t ptt_line2;	/* Optional second one:  PTT_LINE_NONE when not used. */
 
@@ -267,7 +270,6 @@ struct audio_s {
 					/* the case for CubieBoard where it was longer. */
 					/* This is filled in by ptt_init so we don't have to */
 					/* recalculate it each time we access it. */
-					/* Also GPIO chip name for GPIOD method. Looks like 'gpiochip4' */
 
 					/* This could probably be collapsed into ptt_device instead of being separate. */
 
diff --git a/src/config.c b/src/config.c
index ef515f0..c24c929 100644
--- a/src/config.c
+++ b/src/config.c
@@ -1756,8 +1756,8 @@ void config_init (char *fname, struct audio_s *p_audio_config,
 	        dw_printf ("Config file line %d: Missing GPIO chip for %s.\n", line, otname);
 	        continue;
 	      }
-	      strlcpy(p_audio_config->achan[channel].octrl[ot].out_gpio_name, t, 
-	              sizeof(p_audio_config->achan[channel].octrl[ot].out_gpio_name));
+	      strlcpy(p_audio_config->achan[channel].octrl[ot].ptt_device, t,
+	              sizeof(p_audio_config->achan[channel].octrl[ot].ptt_device));
 
 	      t = split(NULL,0);
 	      if (t == NULL) {
diff --git a/src/ptt.c b/src/ptt.c
index 2622059..6ca30ff 100644
--- a/src/ptt.c
+++ b/src/ptt.c
@@ -627,29 +627,45 @@ void export_gpio(int ch, int ot, int invert, int direction)
 	get_access_to_gpio (gpio_value_path);
 }
 
-#if defined(USE_GPIOD)
-int gpiod_probe(const char *chip_name, int line_number)
+#if USE_GPIOD
+struct gpiod_line *gpiod_probe(const char *chip_name, int line_number, int invert)
 {
 	struct gpiod_chip *chip;
-	chip = gpiod_chip_open_by_name(chip_name);
+	chip = gpiod_chip_open_lookup(chip_name);
 	if (chip == NULL) {
 		text_color_set(DW_COLOR_ERROR);
-		dw_printf ("Can't open GPIOD chip %s.\n", chip_name);
-		return -1;
+		dw_printf ("Error opening GPIOD chip %s.\n", chip_name);
+		return NULL;
 	}
 
 	struct gpiod_line *line;
 	line = gpiod_chip_get_line(chip, line_number);
 	if (line == NULL) {
+        gpiod_chip_close(chip);
 		text_color_set(DW_COLOR_ERROR);
-		dw_printf ("Can't get GPIOD line %d.\n", line_number);
-		return -1;
+		dw_printf ("Error getting GPIOD chip: %s line: %d.\n", chip_name, line_number);
+		return NULL;
 	}
+
+    int flags = 0;
+    if (invert) {
+        flags |= GPIOD_LINE_REQUEST_FLAG_ACTIVE_LOW;
+    }
+
+    int rc = gpiod_line_request_output_flags(line, "direwolf", flags, 0);
+    if (rc < 0) {
+        gpiod_chip_close(chip);
+        text_color_set(DW_COLOR_ERROR);
+        dw_printf ("Error requesting GPIOD chip: %s line: %d.\n", chip_name, line_number);
+        return NULL;
+    }
+
 	if (ptt_debug_level >= 2) {
 		text_color_set(DW_COLOR_DEBUG);
 		dw_printf("GPIOD probe OK. Chip: %s line: %d\n", chip_name, line_number);
 	}
-	return 0;
+
+    return line;
 }
 #endif   /* USE_GPIOD */
 #endif   /* not __WIN32__ */
@@ -713,6 +729,10 @@ static HANDLE ptt_fd[MAX_CHANS][NUM_OCTYPES];
 static RIG *rig[MAX_CHANS][NUM_OCTYPES];
 #endif
 
+#if USE_GPIOD
+static struct gpiod_line *gpiod_lines[MAX_CHANS][NUM_OCTYPES];
+#endif
+
 static char otnames[NUM_OCTYPES][8];
 
 void ptt_init (struct audio_s *audio_config_p)
@@ -748,13 +768,12 @@ void ptt_init (struct audio_s *audio_config_p)
 	    if (ptt_debug_level >= 2) {
 
 	      text_color_set(DW_COLOR_DEBUG);
-              dw_printf ("ch=%d, %s method=%d, device=%s, line=%d, name=%s, gpio=%d, lpt_bit=%d, invert=%d\n",
+              dw_printf ("ch=%d, %s method=%d, device=%s, line=%d, gpio=%d, lpt_bit=%d, invert=%d\n",
 		ch,
 		otnames[ot],
 		audio_config_p->achan[ch].octrl[ot].ptt_method, 
 		audio_config_p->achan[ch].octrl[ot].ptt_device,
 		audio_config_p->achan[ch].octrl[ot].ptt_line,
-		audio_config_p->achan[ch].octrl[ot].out_gpio_name,
 		audio_config_p->achan[ch].octrl[ot].out_gpio_num,
 		audio_config_p->achan[ch].octrl[ot].ptt_lpt_bit,
 		audio_config_p->achan[ch].octrl[ot].ptt_invert);
@@ -900,28 +919,7 @@ void ptt_init (struct audio_s *audio_config_p)
 	if (using_gpio) {
 	  get_access_to_gpio ("/sys/class/gpio/export");
 	}
-#if defined(USE_GPIOD)
-    // GPIOD
-	for (ch = 0; ch < MAX_CHANS; ch++) {
-	  if (save_audio_config_p->achan[ch].medium == MEDIUM_RADIO) {
-	    for (int ot = 0; ot < NUM_OCTYPES; ot++) {
-	      if (audio_config_p->achan[ch].octrl[ot].ptt_method == PTT_METHOD_GPIOD) {
-	        const char *chip_name = audio_config_p->achan[ch].octrl[ot].out_gpio_name;
-	        int line_number = audio_config_p->achan[ch].octrl[ot].out_gpio_num;
-	        int rc = gpiod_probe(chip_name, line_number);
-	        if (rc < 0) {
-	          text_color_set(DW_COLOR_ERROR);
-	          dw_printf ("Disable PTT for channel %d\n", ch);
-	          audio_config_p->achan[ch].octrl[ot].ptt_method = PTT_METHOD_NONE;
-	        } else {
-	          // Set initial state off ptt_set will invert output signal if appropriate.
-	          ptt_set (ot, ch, 0);
-	        }
-	      }
-	    }
-	  }
-	}
-#endif /* USE_GPIOD */
+
 /*
  * We should now be able to create the device nodes for 
  * the pins we want to use.
@@ -945,8 +943,30 @@ void ptt_init (struct audio_s *audio_config_p)
 	    }
 	  }
 	}
-#endif
 
+#if USE_GPIOD
+    // GPIOD
+	for (ch = 0; ch < MAX_CHANS; ch++) {
+	  if (save_audio_config_p->achan[ch].medium == MEDIUM_RADIO) {
+	    for (int ot = 0; ot < NUM_OCTYPES; ot++) {
+	      if (audio_config_p->achan[ch].octrl[ot].ptt_method == PTT_METHOD_GPIOD) {
+	        const char *chip_name = audio_config_p->achan[ch].octrl[ot].ptt_device;
+	        int line_number = audio_config_p->achan[ch].octrl[ot].out_gpio_num;
+
+	        struct gpiod_line *line = gpiod_probe(chip_name, line_number, audio_config_p->achan[ch].octrl[ot].ptt_invert);
+	        if (line == NULL) {
+                text_color_set(DW_COLOR_ERROR);
+                dw_printf ("Failed to request GPIOD line, disabling PTT for channel %d\n", ch);
+                audio_config_p->achan[ch].octrl[ot].ptt_method = PTT_METHOD_NONE;
+            } else {
+                gpiod_lines[ch][ot] = line;
+            }
+          }
+	    }
+	  }
+	}
+#endif /* USE_GPIOD */
+#endif
 
 
 /*
@@ -1312,15 +1332,19 @@ void ptt_set (int ot, int chan, int ptt_signal)
 
 	}
 
-#if defined(USE_GPIOD)
+#ifdef USE_GPIOD
 	if (save_audio_config_p->achan[chan].octrl[ot].ptt_method == PTT_METHOD_GPIOD) {
 		const char *chip = save_audio_config_p->achan[chan].octrl[ot].out_gpio_name;
 		int line = save_audio_config_p->achan[chan].octrl[ot].out_gpio_num;
-		int rc = gpiod_ctxless_set_value(chip, line, ptt, false, "direwolf", NULL, NULL);
+		int rc = gpiod_line_set_value(gpiod_lines[chan][ot], ptt);
 		if (ptt_debug_level >= 1) {
 			text_color_set(DW_COLOR_DEBUG);
 			dw_printf("PTT_METHOD_GPIOD chip: %s line: %d ptt: %d  rc: %d\n", chip, line, ptt, rc);
 		}
+		if (rc < 0) {
+			text_color_set(DW_COLOR_ERROR);
+			dw_printf("Error setting GPIOD chip: %s line: %d ptt: %d, err: %s\n", chip, line, ptt, strerror(errno));
+		}
 	}
 #endif /* USE_GPIOD */
 #endif
@@ -1527,6 +1551,20 @@ void ptt_term (void)
 	  }
 	}
 #endif
+
+#ifdef USE_GPIOD
+
+	for (n = 0; n < MAX_CHANS; n++) {
+	  if (save_audio_config_p->achan[n].medium == MEDIUM_RADIO) {
+	    int ot;
+	    for (ot = 0; ot < NUM_OCTYPES; ot++) {
+	      if (gpiod_lines[n][ot] != NULL) {
+              gpiod_line_close_chip(gpiod_lines[n][ot]);
+	      }
+	    }
+	  }
+	}
+#endif
 }
 
 
-- 
2.36.1

